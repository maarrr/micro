// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file auth/auth.proto (package auth, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Struct } from "@bufbuild/protobuf";

/**
 * @generated from message auth.SignUpRequest
 */
export class SignUpRequest extends Message<SignUpRequest> {
  /**
   * @generated from field: string account_uuid = 1;
   */
  accountUuid = "";

  /**
   * @generated from field: string sign_in_method = 2;
   */
  signInMethod = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * @generated from field: string username = 4;
   */
  username = "";

  /**
   * @generated from field: string email = 5;
   */
  email = "";

  /**
   * @generated from field: google.protobuf.Struct data = 6;
   */
  data?: Struct;

  constructor(data?: PartialMessage<SignUpRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.SignUpRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sign_in_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignUpRequest {
    return new SignUpRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignUpRequest {
    return new SignUpRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignUpRequest | PlainMessage<SignUpRequest> | undefined, b: SignUpRequest | PlainMessage<SignUpRequest> | undefined): boolean {
    return proto3.util.equals(SignUpRequest, a, b);
  }
}

/**
 * @generated from message auth.RegisterResponse
 */
export class RegisterResponse extends Message<RegisterResponse> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  /**
   * @generated from field: string account_uuid = 2;
   */
  accountUuid = "";

  constructor(data?: PartialMessage<RegisterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.RegisterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "account_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RegisterResponse {
    return new RegisterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RegisterResponse {
    return new RegisterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RegisterResponse | PlainMessage<RegisterResponse> | undefined, b: RegisterResponse | PlainMessage<RegisterResponse> | undefined): boolean {
    return proto3.util.equals(RegisterResponse, a, b);
  }
}

/**
 * @generated from message auth.SignInByEmailRequest
 */
export class SignInByEmailRequest extends Message<SignInByEmailRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SignInByEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.SignInByEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignInByEmailRequest {
    return new SignInByEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignInByEmailRequest {
    return new SignInByEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignInByEmailRequest {
    return new SignInByEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignInByEmailRequest | PlainMessage<SignInByEmailRequest> | undefined, b: SignInByEmailRequest | PlainMessage<SignInByEmailRequest> | undefined): boolean {
    return proto3.util.equals(SignInByEmailRequest, a, b);
  }
}

/**
 * @generated from message auth.SignInByUsernameRequest
 */
export class SignInByUsernameRequest extends Message<SignInByUsernameRequest> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<SignInByUsernameRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.SignInByUsernameRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SignInByUsernameRequest {
    return new SignInByUsernameRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SignInByUsernameRequest {
    return new SignInByUsernameRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SignInByUsernameRequest {
    return new SignInByUsernameRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SignInByUsernameRequest | PlainMessage<SignInByUsernameRequest> | undefined, b: SignInByUsernameRequest | PlainMessage<SignInByUsernameRequest> | undefined): boolean {
    return proto3.util.equals(SignInByUsernameRequest, a, b);
  }
}

/**
 * @generated from message auth.CheckTokenRequest
 */
export class CheckTokenRequest extends Message<CheckTokenRequest> {
  /**
   * @generated from field: string access_token = 1;
   */
  accessToken = "";

  constructor(data?: PartialMessage<CheckTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.CheckTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "access_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTokenRequest {
    return new CheckTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTokenRequest {
    return new CheckTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTokenRequest {
    return new CheckTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTokenRequest | PlainMessage<CheckTokenRequest> | undefined, b: CheckTokenRequest | PlainMessage<CheckTokenRequest> | undefined): boolean {
    return proto3.util.equals(CheckTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.CheckTokenResponse
 */
export class CheckTokenResponse extends Message<CheckTokenResponse> {
  /**
   * @generated from field: bool is_valid = 1;
   */
  isValid = false;

  /**
   * @generated from field: string uuid = 2;
   */
  uuid = "";

  constructor(data?: PartialMessage<CheckTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.CheckTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CheckTokenResponse {
    return new CheckTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CheckTokenResponse {
    return new CheckTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CheckTokenResponse {
    return new CheckTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CheckTokenResponse | PlainMessage<CheckTokenResponse> | undefined, b: CheckTokenResponse | PlainMessage<CheckTokenResponse> | undefined): boolean {
    return proto3.util.equals(CheckTokenResponse, a, b);
  }
}

/**
 * @generated from message auth.DeleteRequest
 */
export class DeleteRequest extends Message<DeleteRequest> {
  /**
   * @generated from field: string account_uuid = 1;
   */
  accountUuid = "";

  constructor(data?: PartialMessage<DeleteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.DeleteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteRequest {
    return new DeleteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteRequest {
    return new DeleteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteRequest | PlainMessage<DeleteRequest> | undefined, b: DeleteRequest | PlainMessage<DeleteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteRequest, a, b);
  }
}

/**
 * @generated from message auth.DeleteResponse
 */
export class DeleteResponse extends Message<DeleteResponse> {
  /**
   * @generated from field: bool is_deleted = 1;
   */
  isDeleted = false;

  constructor(data?: PartialMessage<DeleteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.DeleteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteResponse {
    return new DeleteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteResponse {
    return new DeleteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteResponse | PlainMessage<DeleteResponse> | undefined, b: DeleteResponse | PlainMessage<DeleteResponse> | undefined): boolean {
    return proto3.util.equals(DeleteResponse, a, b);
  }
}

/**
 * @generated from message auth.UpdatePasswordRequest
 */
export class UpdatePasswordRequest extends Message<UpdatePasswordRequest> {
  /**
   * @generated from field: string account_uuid = 1;
   */
  accountUuid = "";

  /**
   * @generated from field: string old_password = 2;
   */
  oldPassword = "";

  /**
   * @generated from field: string new_password = 3;
   */
  newPassword = "";

  constructor(data?: PartialMessage<UpdatePasswordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.UpdatePasswordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_uuid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "old_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "new_password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordRequest {
    return new UpdatePasswordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePasswordRequest | PlainMessage<UpdatePasswordRequest> | undefined, b: UpdatePasswordRequest | PlainMessage<UpdatePasswordRequest> | undefined): boolean {
    return proto3.util.equals(UpdatePasswordRequest, a, b);
  }
}

/**
 * @generated from message auth.UpdatePasswordResponse
 */
export class UpdatePasswordResponse extends Message<UpdatePasswordResponse> {
  /**
   * @generated from field: bool updated = 1;
   */
  updated = false;

  constructor(data?: PartialMessage<UpdatePasswordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.UpdatePasswordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdatePasswordResponse {
    return new UpdatePasswordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined, b: UpdatePasswordResponse | PlainMessage<UpdatePasswordResponse> | undefined): boolean {
    return proto3.util.equals(UpdatePasswordResponse, a, b);
  }
}

/**
 * @generated from message auth.ValidateEmailTokenRequest
 */
export class ValidateEmailTokenRequest extends Message<ValidateEmailTokenRequest> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  constructor(data?: PartialMessage<ValidateEmailTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ValidateEmailTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailTokenRequest {
    return new ValidateEmailTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailTokenRequest {
    return new ValidateEmailTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailTokenRequest {
    return new ValidateEmailTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailTokenRequest | PlainMessage<ValidateEmailTokenRequest> | undefined, b: ValidateEmailTokenRequest | PlainMessage<ValidateEmailTokenRequest> | undefined): boolean {
    return proto3.util.equals(ValidateEmailTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.ValidateEmailTokenResponse
 */
export class ValidateEmailTokenResponse extends Message<ValidateEmailTokenResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string email_validation_token = 3;
   */
  emailValidationToken = "";

  constructor(data?: PartialMessage<ValidateEmailTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ValidateEmailTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email_validation_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailTokenResponse {
    return new ValidateEmailTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailTokenResponse {
    return new ValidateEmailTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailTokenResponse {
    return new ValidateEmailTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailTokenResponse | PlainMessage<ValidateEmailTokenResponse> | undefined, b: ValidateEmailTokenResponse | PlainMessage<ValidateEmailTokenResponse> | undefined): boolean {
    return proto3.util.equals(ValidateEmailTokenResponse, a, b);
  }
}

/**
 * @generated from message auth.ValidateEmailRequest
 */
export class ValidateEmailRequest extends Message<ValidateEmailRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<ValidateEmailRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ValidateEmailRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailRequest {
    return new ValidateEmailRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailRequest | PlainMessage<ValidateEmailRequest> | undefined, b: ValidateEmailRequest | PlainMessage<ValidateEmailRequest> | undefined): boolean {
    return proto3.util.equals(ValidateEmailRequest, a, b);
  }
}

/**
 * @generated from message auth.ValidateEmailResponse
 */
export class ValidateEmailResponse extends Message<ValidateEmailResponse> {
  /**
   * @generated from field: bool is_valid = 1;
   */
  isValid = false;

  constructor(data?: PartialMessage<ValidateEmailResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ValidateEmailResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidateEmailResponse {
    return new ValidateEmailResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ValidateEmailResponse | PlainMessage<ValidateEmailResponse> | undefined, b: ValidateEmailResponse | PlainMessage<ValidateEmailResponse> | undefined): boolean {
    return proto3.util.equals(ValidateEmailResponse, a, b);
  }
}

/**
 * @generated from message auth.GetResetPasswordTokenRequest
 */
export class GetResetPasswordTokenRequest extends Message<GetResetPasswordTokenRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  constructor(data?: PartialMessage<GetResetPasswordTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.GetResetPasswordTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResetPasswordTokenRequest {
    return new GetResetPasswordTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResetPasswordTokenRequest {
    return new GetResetPasswordTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResetPasswordTokenRequest {
    return new GetResetPasswordTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResetPasswordTokenRequest | PlainMessage<GetResetPasswordTokenRequest> | undefined, b: GetResetPasswordTokenRequest | PlainMessage<GetResetPasswordTokenRequest> | undefined): boolean {
    return proto3.util.equals(GetResetPasswordTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.GetResetPasswordTokenResponse
 */
export class GetResetPasswordTokenResponse extends Message<GetResetPasswordTokenResponse> {
  /**
   * @generated from field: string account_id = 1;
   */
  accountId = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string reset_password_token = 3;
   */
  resetPasswordToken = "";

  constructor(data?: PartialMessage<GetResetPasswordTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.GetResetPasswordTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "account_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reset_password_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResetPasswordTokenResponse {
    return new GetResetPasswordTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResetPasswordTokenResponse {
    return new GetResetPasswordTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResetPasswordTokenResponse {
    return new GetResetPasswordTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResetPasswordTokenResponse | PlainMessage<GetResetPasswordTokenResponse> | undefined, b: GetResetPasswordTokenResponse | PlainMessage<GetResetPasswordTokenResponse> | undefined): boolean {
    return proto3.util.equals(GetResetPasswordTokenResponse, a, b);
  }
}

/**
 * @generated from message auth.ResetPasswordByTokenRequest
 */
export class ResetPasswordByTokenRequest extends Message<ResetPasswordByTokenRequest> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<ResetPasswordByTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ResetPasswordByTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetPasswordByTokenRequest {
    return new ResetPasswordByTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetPasswordByTokenRequest {
    return new ResetPasswordByTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetPasswordByTokenRequest {
    return new ResetPasswordByTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ResetPasswordByTokenRequest | PlainMessage<ResetPasswordByTokenRequest> | undefined, b: ResetPasswordByTokenRequest | PlainMessage<ResetPasswordByTokenRequest> | undefined): boolean {
    return proto3.util.equals(ResetPasswordByTokenRequest, a, b);
  }
}

/**
 * @generated from message auth.ResetPasswordByTokenResponse
 */
export class ResetPasswordByTokenResponse extends Message<ResetPasswordByTokenResponse> {
  /**
   * @generated from field: bool is_valid = 1;
   */
  isValid = false;

  constructor(data?: PartialMessage<ResetPasswordByTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "auth.ResetPasswordByTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_valid", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResetPasswordByTokenResponse {
    return new ResetPasswordByTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResetPasswordByTokenResponse {
    return new ResetPasswordByTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResetPasswordByTokenResponse {
    return new ResetPasswordByTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ResetPasswordByTokenResponse | PlainMessage<ResetPasswordByTokenResponse> | undefined, b: ResetPasswordByTokenResponse | PlainMessage<ResetPasswordByTokenResponse> | undefined): boolean {
    return proto3.util.equals(ResetPasswordByTokenResponse, a, b);
  }
}

